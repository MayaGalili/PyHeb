"""
This file tests all the Hebrew functions to ensure they work correctly
"""

from פעולות import (אם_אז, הדפס, הכפלה_ב2, החזר,
                    חיבור, חיסור, כפל, חילוק, חזקה, שורש,
                    חזור, חזור_עם_מונה,
                    אורך, הפוך, חיבור_מחרוזות, חתוך, מצא,
                    רשימה_ריקה, הוסף_לרשימה, הסר_מרשימה, אורך_רשימה,
                    רשימה_ממחרוזת, מחרוזת_מרשימה,
                    שווה, גדול_מ, קטן_מ, גדול_או_שווה, קטן_או_שווה,
                    מספר_אקראי, עגל)
from בולאנים import נכון, לא_נכון
from מידע_משותף import הוסף_תשובה, נקה_תשובות, תשובות

def בדוק_בולאנים():
    
    assert נכון == True, "נכון צריך להיות True"
    
    assert לא_נכון == False, "לא_נכון צריך להיות False"
    
def בדוק_פונקציות_הדפסה():
    
    הדפס("שלום עולם!")
    הדפס(42)
    הדפס([1, 2, 3])
    

def בדוק_פונקציות_מידע_משותף():

    נקה_תשובות()
    assert len(תשובות) == 0, "תשובות צריך להיות ריק אחרי נקה_תשובות"
    
    הוסף_תשובה("תשובה ראשונה")
    הוסף_תשובה(123)
    הוסף_תשובה([1, 2, 3])
    
    assert len(תשובות) == 3, f"צריך להיות 3 תשובות, יש {len(תשובות)}"
    assert תשובות[0] == "תשובה ראשונה", "תשובה ראשונה לא נכונה"
    assert תשובות[1] == 123, "תשובה שנייה לא נכונה"
    assert תשובות[2] == [1, 2, 3], "תשובה שלישית לא נכונה"
        
    נקה_תשובות()
    assert len(תשובות) == 0, "תשובות צריך להיות ריק אחרי נקה_תשובות"

def בדוק_פונקציית_אם_אז():  
    נקה_תשובות()
    אם_אז(נכון, "תדפיס אותי", הדפס)

    אם_אז(לא_נכון, "אל תדפיס אותי", הדפס)
    
    נקה_תשובות()
    אם_אז(נכון, "ערך להכפלה", הכפלה_ב2)
    assert len(תשובות) == 1, "צריכה להיות תשובה אחת"
    assert תשובות[0] == "ערך להכפלהערך להכפלה", f"תשובה לא נכונה: {תשובות[0]}"
    
def בדוק_פונקציית_הכפלה():
   
    נקה_תשובות()
    הכפלה_ב2("שלום")
    assert תשובות[0] == "שלוםשלום", f"הכפלת מחרוזת לא נכונה: {תשובות[0]}"
    
    נקה_תשובות()
    הכפלה_ב2(5)
    assert תשובות[0] == 10, f"הכפלת מספר לא נכונה: {תשובות[0]}"
    
    נקה_תשובות()
    הכפלה_ב2([1, 2])
    assert תשובות[0] == [1, 2, 1, 2], f"הכפלת רשימה לא נכונה: {תשובות[0]}"
    

def בדוק_פונקציית_החזר():
    
    נקה_תשובות()
    החזר("ערך מוחזר")
    assert len(תשובות) == 1, "צריך להיות תשובה אחת"
    assert תשובות[0] == "ערך מוחזר", f"ערך מוחזר לא נכון: {תשובות[0]}"
    

def בדוק_פונקציות_מתמטיקה():
    
    assert חיבור(5, 3) == 8, "חיבור לא עובד"
    
    assert חיסור(10, 4) == 6, "חיסור לא עובד"
    
    assert כפל(4, 5) == 20, "כפל לא עובד"
    
    assert חילוק(15, 3) == 5, "חילוק לא עובד"
    
    assert חזקה(2, 3) == 8, "חזקה לא עובדת"
    
    assert שורש(16) == 4, "שורש לא עובד"


def בדוק_פונקציות_מחרוזות():
    
    assert אורך("שלום") == 4, "אורך לא עובד"
    
    assert הפוך("שלום") == "םולש", "הפוך לא עובד"
    
    assert חיבור_מחרוזות("שלום ", "עולם") == "שלום עולם", "חיבור מחרוזות לא עובד"
    
    assert חתוך("שלום עולם", 0, 4) == "שלום", "חתוך לא עובד"
    
    assert מצא("שלום עולם", "עולם") == True, "מצא לא עובד"


def בדוק_פונקציות_רשימות():
    
    רשימה = רשימה_ריקה()
    assert len(רשימה) == 0, "רשימה ריקה לא עובדת"
    
    הוסף_לרשימה(רשימה, "ערך ראשון")
    הוסף_לרשימה(רשימה, "ערך שני")
    assert אורך_רשימה(רשימה) == 2, "הוסף לרשימה לא עובד"
    
    הסר_מרשימה(רשימה, "ערך ראשון")
    assert אורך_רשימה(רשימה) == 1, "הסר מרשימה לא עובד"
    
    רשימה_חדשה = רשימה_ממחרוזת("אחד שניים שלושה")
    assert len(רשימה_חדשה) == 3, "רשימה ממחרוזת לא עובדת"
    
    מחרוזת = מחרוזת_מרשימה(["אחד", "שניים", "שלושה"])
    assert מחרוזת == "אחד שניים שלושה", "מחרוזת מרשימה לא עובדת"
    

def בדוק_פונקציות_השוואה():
    
    assert שווה(5, 5) == True, "שווה לא עובד"
    assert שווה(5, 3) == False, "שווה לא עובד"
    
    assert גדול_מ(10, 5) == True, "גדול מ לא עובד"
    assert גדול_מ(3, 7) == False, "גדול מ לא עובד"
    
    assert קטן_מ(3, 7) == True, "קטן מ לא עובד"
    assert קטן_מ(10, 5) == False, "קטן מ לא עובד"
    
    assert גדול_או_שווה(5, 5) == True, "גדול או שווה לא עובד"
    assert גדול_או_שווה(7, 5) == True, "גדול או שווה לא עובד"
    
    assert קטן_או_שווה(5, 5) == True, "קטן או שווה לא עובד"
    assert קטן_או_שווה(3, 5) == True, "קטן או שווה לא עובד"
    

def בדוק_פונקציות_עזר():
    
    assert עגל(3.14159, 2) == 3.14, "עיגול לא עובד"
    
    מספר = מספר_אקראי(1, 10)
    assert 1 <= מספר <= 10, "מספר אקראי לא עובד"
    

def הרץ_כל_הבדיקות():    
    הדפס("מתחיל בדיקות עבור פונקציות פיתון בעברית")
    הדפס("=" * 50)
    
    בדוק_בולאנים()
    בדוק_פונקציות_הדפסה()
    בדוק_פונקציות_מידע_משותף()
    בדוק_פונקציית_אם_אז()
    בדוק_פונקציית_הכפלה()
    בדוק_פונקציית_החזר()
    בדוק_פונקציות_מתמטיקה()
    בדוק_פונקציות_מחרוזות()
    בדוק_פונקציות_רשימות()
    בדוק_פונקציות_השוואה()
    בדוק_פונקציות_עזר()
        
    הדפס("כל הבדיקות עברו בהצלחה!")
        

if __name__ == "__main__":
    הרץ_כל_הבדיקות()
